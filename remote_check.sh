#!/bin/bash

# Script de verificaci√≥n remota para ServiLab API
# Verifica el estado del servidor desde la m√°quina local

set -e

echo "üîç Verificando estado remoto de ServiLab API..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para logs
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar conexi√≥n SSH
log_info "Verificando conexi√≥n SSH..."
if ! ssh mi-vm 'echo "‚úÖ Conexi√≥n SSH exitosa"' 2>/dev/null; then
    log_error "‚ùå No se pudo conectar al servidor"
    log_error "Verifica que puedas conectarte con: ssh mi-vm"
    exit 1
fi

# Ejecutar verificaci√≥n completa en el servidor
log_info "Ejecutando verificaci√≥n en el servidor..."
ssh mi-vm << 'EOF'
    set -e
    
    # Colores para output remoto
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
    
    log_info() {
        echo -e "${GREEN}[REMOTO]${NC} $1"
    }
    
    log_warn() {
        echo -e "${YELLOW}[REMOTO]${NC} $1"
    }
    
    log_error() {
        echo -e "${RED}[REMOTO]${NC} $1"
    }
    
    echo "üîç Verificaci√≥n completa del servidor..."
    
    # Verificar PM2
    log_info "Verificando procesos PM2..."
    if command -v pm2 &> /dev/null; then
        pm2 list
        echo ""
        
        # Verificar proceso espec√≠fico
        if pm2 show servilab_notify &> /dev/null; then
            if pm2 list | grep -q "servilab_notify.*online"; then
                log_info "‚úÖ Proceso servilab_notify est√° corriendo"
            else
                log_error "‚ùå Proceso servilab_notify no est√° corriendo"
                echo "Logs recientes:"
                pm2 logs servilab_notify --lines 5
            fi
        else
            log_error "‚ùå Proceso servilab_notify no est√° registrado"
        fi
    else
        log_error "‚ùå PM2 no est√° instalado"
    fi
    
    # Verificar puerto 3000
    log_info "Verificando puerto 3000..."
    if netstat -tlnp | grep -q ":3000"; then
        log_info "‚úÖ Puerto 3000 est√° en uso"
    else
        log_error "‚ùå Puerto 3000 no est√° en uso"
    fi
    
    # Verificar conectividad directa
    log_info "Verificando conectividad directa..."
    if curl -s -f http://localhost:3000/test > /dev/null; then
        log_info "‚úÖ Servicio responde correctamente en puerto 3000"
    else
        log_error "‚ùå El servicio no responde en puerto 3000"
    fi
    
    # Verificar nginx
    if command -v nginx &> /dev/null; then
        log_info "Verificando nginx..."
        if systemctl is-active --quiet nginx; then
            log_info "‚úÖ Nginx est√° corriendo"
            
            # Verificar proxy
            if curl -s -f http://localhost/servilab/test > /dev/null; then
                log_info "‚úÖ Proxy de nginx funciona correctamente"
            else
                log_error "‚ùå Proxy de nginx no responde"
            fi
        else
            log_error "‚ùå Nginx no est√° corriendo"
        fi
    else
        log_warn "‚ö†Ô∏è Nginx no est√° instalado"
    fi
    
    # Verificar estructura de directorios
    log_info "Verificando estructura de directorios..."
    if [ -d "/var/www/html/servilab/notify" ]; then
        log_info "‚úÖ Directorio notify existe"
        
        # Verificar archivos importantes
        cd /var/www/html/servilab/notify
        if [ -f "server.js" ]; then
            log_info "‚úÖ server.js existe"
        else
            log_error "‚ùå server.js no encontrado"
        fi
        
        if [ -f ".env" ]; then
            log_info "‚úÖ .env existe"
        else
            log_warn "‚ö†Ô∏è .env no encontrado"
        fi
        
        if [ -d ".data" ]; then
            log_info "‚úÖ .data existe"
        else
            log_warn "‚ö†Ô∏è .data no encontrado"
        fi
    else
        log_error "‚ùå Directorio notify no existe"
    fi
    
    # Verificar uso de recursos
    log_info "Verificando uso de recursos..."
    echo "Memoria:"
    free -h
    echo ""
    echo "CPU:"
    top -bn1 | grep "Cpu(s)" | head -n1
    echo ""
    echo "Espacio en disco:"
    df -h /var/www/html/
    
    echo ""
    echo "üìã Resumen:"
    echo "   - PM2: $(pm2 list | grep servilab_notify | awk '{print $12}' || echo 'N/A')"
    echo "   - Puerto 3000: $(netstat -tlnp | grep -q ":3000" && echo "‚úÖ En uso" || echo "‚ùå Libre")"
    echo "   - Nginx: $(systemctl is-active nginx 2>/dev/null || echo "inactive")"
    echo "   - Directorio: $(test -d /var/www/html/servilab/notify && echo "‚úÖ Existe" || echo "‚ùå No existe")"
    echo ""
    echo "üìã URLs:"
    echo "   - Directo: http://localhost:3000/test"
    echo "   - Nginx: http://localhost/servilab/test"
    echo "   - Docs: http://localhost/servilab/docs"
EOF

echo ""
log_info "üéâ Verificaci√≥n remota completada!"
echo ""
log_info "üìã Comandos √∫tiles:"
echo "   - Conectar: ssh mi-vm"
echo "   - Verificar estado: ./remote_check.sh"
echo "   - Ver logs: ssh mi-vm 'pm2 logs servilab_notify'"
echo "   - Reiniciar: ssh mi-vm 'pm2 restart servilab_notify'" 